// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAccountInfo = "/account.service.Account/Info"
var PathAccountProfile = "/account.service.Account/Profile"
var PathAccountToken = "/account.service.Account/Token"

// AccountBMServer is the server API for Account service.
type AccountBMServer interface {
	Info(ctx context.Context, req *MidReq) (resp *InfoReply, err error)

	Profile(ctx context.Context, req *MidReq) (resp *ProfileReply, err error)

	Token(ctx context.Context, req *TokenReq) (resp *TokenReply, err error)
}

var AccountSvc AccountBMServer

func accountInfo(c *bm.Context) {
	p := new(MidReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.Info(c, p)
	c.JSON(resp, err)
}

func accountProfile(c *bm.Context) {
	p := new(MidReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.Profile(c, p)
	c.JSON(resp, err)
}

func accountToken(c *bm.Context) {
	p := new(TokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.Token(c, p)
	c.JSON(resp, err)
}

// RegisterAccountBMServer Register the blademaster route
func RegisterAccountBMServer(e *bm.Engine, server AccountBMServer) {
	AccountSvc = server
	e.GET("/account.service.Account/Info", accountInfo)
	e.GET("/account.service.Account/Profile", accountProfile)
	e.GET("/account.service.Account/Token", accountToken)
}
